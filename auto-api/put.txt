func {{routeName}}Put(w http.ResponseWriter, r *http.Request, db *sql.DB) {
	
	// Getting the body of the request
	body := tools.ReadBody(r)
	query := tools.ReadQuery(r)
	
	tools.RequestLog(r, body)

	// Checking if the body contains the required fields
	if tools.AtLeastOneValueInBody(body, {{fields}}) || tools.ValuesNotInQuery(query, {{primaryKeys}}) {
		tools.JsonResponse(w, 400, `{"message": "Missing fields"}`)
		return
	}

	{{primaryKeys to var from query}}
    {{fields to var from body}}

	// Checking if the values are empty
	if tools.ValueIsEmpty({{primaryKeysVar}}) {
		tools.JsonResponse(w, 400, `{"message": "Empty fields"}`)
		return
	}

	// for each key in the body, if the key is not in the query, return an error
	for key, _ := range body {
		// if the key is empty
		if tools.ValueIsEmpty(tools.BodyValueToString(body, key)) {
			tools.JsonResponse(w, 400, `{"message": "Empty fields"}`)
			return
		}
	}

	// Checking if the values are too short or too long
	if tools.ValueTooShort(4, {{fieldsVar}}) {
		tools.JsonResponse(w, 400, `{"message": "values too short"}`)
		return
	}
	if tools.ValueTooLong(32, {{fieldsVar}}) {
		tools.JsonResponse(w, 400, `{"message": "values too long"}`)
		return
	}

    {{foreignKeyTests}}

	{{uniqueFieldsTests}}

	{{passwordCheck}}

    {{emailCheck}}

	request := "UPDATE `{{routeTable}}` SET "
	var params []interface{}
	
	for key, value := range body {
		if !tools.ValueInArray(key, {{primaryKeys}}) {
			if key == "password" {
				value = tools.HashPassword(value.(string))
			}
			tools.AppendUpdate(&request, &params, key, value)
		}
	}

	// Removing the last ","
	request = request[:len(request)-2]

	request += " WHERE {{primaryKeysSQL}}"
	params = append(params, {{primaryKeysVar}})

	// Updating the account in the database
	result, err := tools.ExecuteQuery(db, request, params...)
	if err != nil {
		tools.ErrorLog(err.Error())
		tools.JsonResponse(w, 500, `{"message": "Internal server error"}`)
		return
	}
	defer result.Close()

	// Creating the response
	jsonResponse := `{"message": "{{routeName}} updated"`
	
	// Adding the return fields of the query
	fields, err := {{routeName}}GetAll(db, {{primaryKeysVar}}, false)
	if err != nil {
		tools.ErrorLog(err.Error())
		tools.JsonResponse(w, 500, `{"message": "Internal server error"}`)
		return
	}

	// Sending the response
	tools.JsonResponse(w, 200, jsonResponse + "," + fields + "}")

}