func {{routeName}}Post(w http.ResponseWriter, r *http.Request, db *sql.DB) {

	// Getting the body of the request
	body := tools.ReadBody(r)
	
	tools.RequestLog(r, body)

	// Checking if the body contains the required fields
	if tools.ValuesNotInBody(body, {{fields}}) {
		tools.JsonResponse(w, 400, `{"message": "Missing fields"}`)
		return
	}

    {{fields to var from body}}

	// Checking if the values are empty
	if tools.ValueIsEmpty({{fieldsVar}}) {
		tools.JsonResponse(w, 400, `{"message": "Fields cannot be empty"}`)
		return
	}

	// Checking if the values are too short or too long
	if tools.ValueTooShort(4, {{fieldsVar}}) {
		tools.JsonResponse(w, 400, `{"message": "Fields too short"}`)
		return
	}
	if tools.ValueTooLong(32, {{fieldsVar}}) {
		tools.JsonResponse(w, 400, `{"message": "Fields too long"}`)
		return
	}

    {{foreignKeyTests}}
	
	{{passwordCheck}}

	{{emailCheck}}

	{{uniqueFieldsTests}}

	{{primaryKeyUUID}}

	// Inserting the {{routeName}} in the database
	result, err := tools.ExecuteQuery(db, "INSERT INTO `{{routeTable}}` ({{primaryKeys}}, {{fields}}) VALUES ({{questionMarks}})", {{primaryKeysVar}}, {{fieldsVarSQL}})
	if err != nil {
		tools.ErrorLog(err.Error())
		tools.JsonResponse(w, 500, `{"message": "Internal server error"}`)
		return
	}
	defer result.Close()

	// Creating the response
	jsonResponse := `{"message": "{{routeName}} created"`

	// Adding the return fields of the query
	fields, err := {{routeName}}GetAll(db, {{primaryKeysVar}}, false)
	if err != nil {
		tools.ErrorLog(err.Error())
		tools.JsonResponse(w, 500, `{"message": "Internal server error"}`)
		return
	}

	// Sending the response
	tools.JsonResponse(w, 201, jsonResponse + "," + fields + "}")

}